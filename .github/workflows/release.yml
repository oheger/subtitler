name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-RC[0-9]+"
  workflow_dispatch:
    inputs:
      draft:
        description: Should this be a draft release?
        type: boolean
        required: false
        default: false

permissions:
  contents: read

jobs:
  get-versions:
    runs-on: ubuntu-24.04
    outputs:
      subtitlerVersion: ${{ steps.version-getter.outputs.SUBTITLER_VERSION }}
      scalaVersion: ${{ steps.version-getter.outputs.SCALA_VERSION }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Determine versions
      id: version-getter
      shell: bash
      run: |
        SUBTITLER_VERSION=$(sed -e 's/^lazy val VersionSubtitler[^"]*"\([^"]*\)".*/\1/;t;d' build.sbt)
        SCALA_VERSION=$(sed -e 's/^lazy val VersionScala[[:space:]][^"]*"\([^"]*\)".*/\1/;t;d' build.sbt)
        echo "SUBTITLER_VERSION=$SUBTITLER_VERSION" >> "$GITHUB_OUTPUT"
        echo "SCALA_VERSION=$SCALA_VERSION" >> "$GITHUB_OUTPUT"      

  create-installers:
    needs: get-versions
    strategy:
      matrix:
        target:
        - name: "Linux x64"
          os: ubuntu-24.04
          options-suffix: "linux"
          artifact: "deb"
          extension: "_amd64.deb"

    runs-on: ${{ matrix.target.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'sbt'
    - name: Set up SBT
      uses: sbt/setup-sbt@v1
    - name: Build installer
      env:
        SUBTITLER_VERSION: ${{ needs.get-versions.outputs.subtitlerVersion }}
        SCALA_VERSION: ${{ needs.get-versions.outputs.scalaVersion }}
      shell: bash
      run: |
        sbt assembly
        
        TARGET_DIR=./target/scala-"$SCALA_VERSION"
        echo "Creating release $SUBTITLER_VERSION for Scala $SCALA_VERSION from $TARGET_DIR."
        
        # The '@' option of jpackage to specify a parameter file name does not seem to work;
        # therefore, the file is read manually.
        platformOptions=""
        while read -r line; do
          platformOptions="$platformOptions $line"
        done < "./src/main/jpackage/jpackage-options-${{ matrix.target.options-suffix }}.txt"
        
        jpackage \
          --verbose \
          --input "$TARGET_DIR" \
          --name "Subtitler" \
          --app-version "$SUBTITLER_VERSION" \
          --description "An application that transforms speech to text in realtime." \
          --vendor "oheger" \
          --about-url "https://github.com/oheger/subtitler" \
          --main-jar "subtitler-assembly-$SUBTITLER_VERSION.jar" \
          --main-class "com.github.oheger.subtitler.ui.UiMain" \
          --license-file "LICENSE.txt" \
          --dest target/installer \
          $platformOptions
    - name: Upload installer
      env:
        SUBTITLER_VERSION: ${{ needs.get-versions.outputs.subtitlerVersion }}
      uses: actions/upload-artifact@v4
      with:
        name: subtitler-${{ env.SUBTITLER_VERSION }}-${{ matrix.target.artifact }}
        path: ./target/installer/subtitler_${{ env.SUBTITLER_VERSION }}${{ matrix.target.extension }}
        retention-days: 7

  create-release:
    needs: [ get-versions, create-installers ]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Download installers
      uses: actions/download-artifact@v5
      with:
        path: artifacts/
    - name: Create checksums
      shell: bash
      run: |
        shasum --algorithm 256 ./artifacts/* | sed 's|./artifacts/||' > checksums.txt
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SUBTITLER_VERSION: ${{ needs.get-versions.outputs.subtitlerVersion }}
        DRAFT_FLAG: ${{ inputs.draft }}
      run: |
        if [[ "$SUBTITLER_VERSION" =~ -RC[0-9]+ ]]; then
          PRERELEASE_ARG="--prerelease"
        fi
        if [[ "$DRAFT_FLAG" = "true" ]]; then
          DRAFT_ARG="--draft"
        fi

        gh release create $SUBTITLER_VERSION $PRERELEASE_ARG $DRAFT_ARG \
          --title "Subtitler $SUBTITLER_VERSION" \
          './artifacts/*' \
          'checksums.txt#checksums'
